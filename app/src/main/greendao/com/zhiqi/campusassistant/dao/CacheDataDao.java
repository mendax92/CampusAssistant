package com.zhiqi.campusassistant.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhiqi.campusassistant.common.entity.CacheData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CACHE_DATA".
*/
public class CacheDataDao extends AbstractDao<CacheData, String> {

    public static final String TABLENAME = "CACHE_DATA";

    /**
     * Properties of entity CacheData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CacheKey = new Property(0, String.class, "cacheKey", true, "cache_key");
        public final static Property CacheData = new Property(1, String.class, "cacheData", false, "cache_data");
        public final static Property CacheTime = new Property(2, long.class, "cacheTime", false, "cache_time");
    }


    public CacheDataDao(DaoConfig config) {
        super(config);
    }
    
    public CacheDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CACHE_DATA\" (" + //
                "\"cache_key\" TEXT PRIMARY KEY NOT NULL ," + // 0: cacheKey
                "\"cache_data\" TEXT," + // 1: cacheData
                "\"cache_time\" INTEGER NOT NULL );"); // 2: cacheTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CACHE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CacheData entity) {
        stmt.clearBindings();
 
        String cacheKey = entity.getCacheKey();
        if (cacheKey != null) {
            stmt.bindString(1, cacheKey);
        }
 
        String cacheData = entity.getCacheData();
        if (cacheData != null) {
            stmt.bindString(2, cacheData);
        }
        stmt.bindLong(3, entity.getCacheTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CacheData entity) {
        stmt.clearBindings();
 
        String cacheKey = entity.getCacheKey();
        if (cacheKey != null) {
            stmt.bindString(1, cacheKey);
        }
 
        String cacheData = entity.getCacheData();
        if (cacheData != null) {
            stmt.bindString(2, cacheData);
        }
        stmt.bindLong(3, entity.getCacheTime());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CacheData readEntity(Cursor cursor, int offset) {
        CacheData entity = new CacheData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cacheKey
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cacheData
            cursor.getLong(offset + 2) // cacheTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CacheData entity, int offset) {
        entity.setCacheKey(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCacheData(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCacheTime(cursor.getLong(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CacheData entity, long rowId) {
        return entity.getCacheKey();
    }
    
    @Override
    public String getKey(CacheData entity) {
        if(entity != null) {
            return entity.getCacheKey();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CacheData entity) {
        return entity.getCacheKey() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
