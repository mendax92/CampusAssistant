package com.zhiqi.campusassistant.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhiqi.campusassistant.core.user.entity.Gender;
import com.zhiqi.campusassistant.core.user.entity.GenderConverter;
import com.zhiqi.campusassistant.core.user.entity.UserRole;
import com.zhiqi.campusassistant.core.user.entity.UserRoleConverter;

import com.zhiqi.campusassistant.core.login.entity.LoginUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_USER".
*/
public class LoginUserDao extends AbstractDao<LoginUser, Long> {

    public static final String TABLENAME = "LOGIN_USER";

    /**
     * Properties of entity LoginUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User_id = new Property(0, long.class, "user_id", true, "_id");
        public final static Property Token = new Property(1, String.class, "token", false, "TOKEN");
        public final static Property Role_type = new Property(2, Integer.class, "role_type", false, "ROLE_TYPE");
        public final static Property User_no = new Property(3, String.class, "user_no", false, "USER_NO");
        public final static Property Real_name = new Property(4, String.class, "real_name", false, "REAL_NAME");
        public final static Property Head = new Property(5, String.class, "head", false, "HEAD");
        public final static Property Faculty_id = new Property(6, int.class, "faculty_id", false, "FACULTY_ID");
        public final static Property Faculty = new Property(7, String.class, "faculty", false, "FACULTY");
        public final static Property Position = new Property(8, String.class, "position", false, "POSITION");
        public final static Property Phone = new Property(9, String.class, "phone", false, "PHONE");
        public final static Property Gender = new Property(10, Integer.class, "gender", false, "GENDER");
        public final static Property School_badge = new Property(11, String.class, "school_badge", false, "SCHOOL_BADGE");
        public final static Property School_name = new Property(12, String.class, "school_name", false, "SCHOOL_NAME");
        public final static Property Avatar = new Property(13, String.class, "avatar", false, "AVATAR");
        public final static Property Nickname = new Property(14, String.class, "nickname", false, "NICKNAME");
    }

    private final UserRoleConverter role_typeConverter = new UserRoleConverter();
    private final GenderConverter genderConverter = new GenderConverter();

    public LoginUserDao(DaoConfig config) {
        super(config);
    }
    
    public LoginUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: user_id
                "\"TOKEN\" TEXT," + // 1: token
                "\"ROLE_TYPE\" INTEGER," + // 2: role_type
                "\"USER_NO\" TEXT," + // 3: user_no
                "\"REAL_NAME\" TEXT," + // 4: real_name
                "\"HEAD\" TEXT," + // 5: head
                "\"FACULTY_ID\" INTEGER NOT NULL ," + // 6: faculty_id
                "\"FACULTY\" TEXT," + // 7: faculty
                "\"POSITION\" TEXT," + // 8: position
                "\"PHONE\" TEXT," + // 9: phone
                "\"GENDER\" INTEGER," + // 10: gender
                "\"SCHOOL_BADGE\" TEXT," + // 11: school_badge
                "\"SCHOOL_NAME\" TEXT," + // 12: school_name
                "\"AVATAR\" TEXT," + // 13: avatar
                "\"NICKNAME\" TEXT);"); // 14: nickname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginUser entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUser_id());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        UserRole role_type = entity.getRole_type();
        if (role_type != null) {
            stmt.bindLong(3, role_typeConverter.convertToDatabaseValue(role_type));
        }
 
        String user_no = entity.getUser_no();
        if (user_no != null) {
            stmt.bindString(4, user_no);
        }
 
        String real_name = entity.getReal_name();
        if (real_name != null) {
            stmt.bindString(5, real_name);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(6, head);
        }
        stmt.bindLong(7, entity.getFaculty_id());
 
        String faculty = entity.getFaculty();
        if (faculty != null) {
            stmt.bindString(8, faculty);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(9, position);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
 
        Gender gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(11, genderConverter.convertToDatabaseValue(gender));
        }
 
        String school_badge = entity.getSchool_badge();
        if (school_badge != null) {
            stmt.bindString(12, school_badge);
        }
 
        String school_name = entity.getSchool_name();
        if (school_name != null) {
            stmt.bindString(13, school_name);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(14, avatar);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(15, nickname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginUser entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUser_id());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        UserRole role_type = entity.getRole_type();
        if (role_type != null) {
            stmt.bindLong(3, role_typeConverter.convertToDatabaseValue(role_type));
        }
 
        String user_no = entity.getUser_no();
        if (user_no != null) {
            stmt.bindString(4, user_no);
        }
 
        String real_name = entity.getReal_name();
        if (real_name != null) {
            stmt.bindString(5, real_name);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(6, head);
        }
        stmt.bindLong(7, entity.getFaculty_id());
 
        String faculty = entity.getFaculty();
        if (faculty != null) {
            stmt.bindString(8, faculty);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(9, position);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
 
        Gender gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(11, genderConverter.convertToDatabaseValue(gender));
        }
 
        String school_badge = entity.getSchool_badge();
        if (school_badge != null) {
            stmt.bindString(12, school_badge);
        }
 
        String school_name = entity.getSchool_name();
        if (school_name != null) {
            stmt.bindString(13, school_name);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(14, avatar);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(15, nickname);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LoginUser readEntity(Cursor cursor, int offset) {
        LoginUser entity = new LoginUser( //
            cursor.getLong(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // token
            cursor.isNull(offset + 2) ? null : role_typeConverter.convertToEntityProperty(cursor.getInt(offset + 2)), // role_type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_no
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // real_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // head
            cursor.getInt(offset + 6), // faculty_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // faculty
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // position
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // phone
            cursor.isNull(offset + 10) ? null : genderConverter.convertToEntityProperty(cursor.getInt(offset + 10)), // gender
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // school_badge
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // school_name
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // avatar
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // nickname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginUser entity, int offset) {
        entity.setUser_id(cursor.getLong(offset + 0));
        entity.setToken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRole_type(cursor.isNull(offset + 2) ? null : role_typeConverter.convertToEntityProperty(cursor.getInt(offset + 2)));
        entity.setUser_no(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReal_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHead(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFaculty_id(cursor.getInt(offset + 6));
        entity.setFaculty(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPosition(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGender(cursor.isNull(offset + 10) ? null : genderConverter.convertToEntityProperty(cursor.getInt(offset + 10)));
        entity.setSchool_badge(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSchool_name(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAvatar(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNickname(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginUser entity, long rowId) {
        entity.setUser_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginUser entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginUser entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
